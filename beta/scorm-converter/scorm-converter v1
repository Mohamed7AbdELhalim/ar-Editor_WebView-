import { useState, useRef } from 'react'
import { Button } from "/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "/components/ui/card"
import { Upload, Clock, X, Check } from "lucide-react"

export default function ScormConverter() {
  const [file, setFile] = useState<File | null>(null)
  const [status, setStatus] = useState<'idle' | 'uploading' | 'converting' | 'success' | 'error'>('idle')
  const [htmlContent, setHtmlContent] = useState<string>('')
  const [error, setError] = useState<string>('')
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = e.target.files?.[0]
    if (selectedFile) {
      validateAndProcessFile(selectedFile)
    }
  }

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
  }

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault()
    const droppedFile = e.dataTransfer.files?.[0]
    if (droppedFile) {
      validateAndProcessFile(droppedFile)
    }
  }

  const validateAndProcessFile = (file: File) => {
    // Validate file type
    if (!file.name.endsWith('.zip')) {
      setError('Please upload a valid SCORM package (ZIP file)')
      setStatus('error')
      return
    }

    // Validate file size (max 100MB)
    if (file.size > 100 * 1024 * 1024) {
      setError('File size exceeds 100MB limit')
      setStatus('error')
      return
    }

    setFile(file)
    setError('')
    setStatus('uploading')
    
    // Simulate upload and conversion process
    setTimeout(() => {
      setStatus('converting')
      
      // Simulate conversion time
      setTimeout(() => {
        // In a real app, this would extract and convert the SCORM package
        // For demo purposes, we'll use sample HTML content
        const sampleHtml = `
          <!DOCTYPE html>
          <html>
          <head>
            <title>Sample SCORM Content</title>
            <style>
              body { font-family: Arial, sans-serif; padding: 20px; }
              h1 { color: #333; }
              p { line-height: 1.6; }
              .module { background: #f9f9f9; padding: 15px; border-radius: 8px; margin-bottom: 20px; }
            </style>
          </head>
          <body>
            <h1>SCORM Course Content</h1>
            <div class="module">
              <h2>Module 1: Introduction</h2>
              <p>Welcome to this SCORM course. This content has been converted from a SCORM package.</p>
            </div>
            <div class="module">
              <h2>Module 2: Advanced Topics</h2>
              <p>Here you'll find more advanced content about SCORM and e-learning standards.</p>
            </div>
          </body>
          </html>
        `
        setHtmlContent(sampleHtml)
        setStatus('success')
      }, 2000)
    }, 1000)
  }

  const resetConverter = () => {
    setFile(null)
    setStatus('idle')
    setHtmlContent('')
    setError('')
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="text-center mb-10">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">SCORM to HTML Converter</h1>
          <p className="text-gray-600">Upload your SCORM package and convert it to HTML for easy preview</p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Upload SCORM Package</CardTitle>
          </CardHeader>
          <CardContent>
            {status === 'idle' && (
              <div
                className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer transition-colors hover:border-blue-500"
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                onClick={() => fileInputRef.current?.click()}
              >
                <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
                <p className="text-lg font-medium text-gray-700 mb-2">
                  <span className="text-blue-600">Click to upload</span> or drag and drop
                </p>
                <p className="text-sm text-gray-500">SCORM package (ZIP file)</p>
                <input
                  ref={fileInputRef}
                  type="file"
                  className="hidden"
                  accept=".zip"
                  onChange={handleFileChange}
                />
              </div>
            )}

            {status === 'uploading' && (
              <div className="text-center py-8">
                <div className="flex justify-center mb-4">
                  <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
                </div>
                <p className="text-gray-700">Uploading your file...</p>
              </div>
            )}

            {status === 'converting' && (
              <div className="text-center py-8">
                <Clock className="mx-auto h-12 w-12 text-blue-500 mb-4 animate-pulse" />
                <p className="text-gray-700">Converting SCORM package to HTML...</p>
              </div>
            )}

            {status === 'success' && file && (
              <div>
                <div className="flex items-center justify-between mb-6 p-4 bg-green-50 rounded-lg">
                  <div className="flex items-center">
                    <Check className="h-5 w-5 text-green-500 mr-2" />
                    <span className="text-green-700 font-medium">Conversion successful!</span>
                  </div>
                  <span className="text-sm text-gray-600">{file.name}</span>
                </div>
                
                <div className="mb-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Preview</h3>
                  <div className="border rounded-lg overflow-hidden" style={{ height: '500px' }}>
                    <iframe
                      srcDoc={htmlContent}
                      className="w-full h-full"
                      title="SCORM Content Preview"
                      sandbox="allow-same-origin allow-scripts allow-forms"
                    />
                  </div>
                </div>
                
                <div className="flex justify-end">
                  <Button onClick={resetConverter} variant="outline">
                    Upload Another File
                  </Button>
                </div>
              </div>
            )}

            {status === 'error' && (
              <div className="text-center py-8">
                <X className="mx-auto h-12 w-12 text-red-500 mb-4" />
                <p className="text-red-600 mb-4">{error}</p>
                <Button onClick={resetConverter} variant="outline">
                  Try Again
                </Button>
              </div>
            )}
          </CardContent>
        </Card>

        <div className="mt-8 bg-white p-6 rounded-lg shadow-sm">
          <h3 className="text-lg font-medium text-gray-900 mb-3">How to use</h3>
          <ol className="list-decimal pl-5 space-y-2 text-gray-600">
            <li>Upload your SCORM package (ZIP file)</li>
            <li>Wait for the conversion process to complete</li>
            <li>Preview the converted HTML content</li>
            <li>Download or use the HTML content as needed</li>
          </ol>
        </div>
      </div>
    </div>
  )
}
