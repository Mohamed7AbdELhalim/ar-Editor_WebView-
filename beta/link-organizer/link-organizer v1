import { useState, useEffect } from 'react'
import { Button } from "/components/ui/button"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Search, Plus, Folder, FileText, Image, Video, Globe, Trash2, Edit } from "lucide-react"

interface LinkItem {
  id: string
  title: string
  url: string
  content: string
  notes: string
  folder: string
  type: 'link' | 'image' | 'video' | 'document'
  createdAt: Date
}

const LinkOrganizer = () => {
  const [links, setLinks] = useState<LinkItem[]>([])
  const [folders, setFolders] = useState<string[]>(['All', 'Work', 'Personal', 'Research'])
  const [selectedFolder, setSelectedFolder] = useState('All')
  const [searchTerm, setSearchTerm] = useState('')
  const [newLink, setNewLink] = useState({ title: '', url: '', folder: 'Work' })
  const [editingLink, setEditingLink] = useState<LinkItem | null>(null)
  const [selectedLink, setSelectedLink] = useState<LinkItem | null>(null)
  const [newNote, setNewNote] = useState('')

  // Load initial data
  useEffect(() => {
    const savedLinks = localStorage.getItem('linkOrganizerLinks')
    if (savedLinks) {
      setLinks(JSON.parse(savedLinks))
    }
  }, [])

  // Save links to localStorage
  useEffect(() => {
    localStorage.setItem('linkOrganizerLinks', JSON.stringify(links))
  }, [links])

  const handleAddLink = () => {
    if (!newLink.title || !newLink.url) return

    const linkType = determineLinkType(newLink.url)
    const newLinkItem: LinkItem = {
      id: Date.now().toString(),
      title: newLink.title,
      url: newLink.url,
      content: generatePreviewContent(linkType),
      notes: '',
      folder: newLink.folder,
      type: linkType,
      createdAt: new Date()
    }

    setLinks([...links, newLinkItem])
    setNewLink({ title: '', url: '', folder: 'Work' })
  }

  const determineLinkType = (url: string): 'link' | 'image' | 'video' | 'document' => {
    if (url.includes('youtube.com') || url.includes('youtu.be')) return 'video'
    if (url.includes('imgur.com') || url.includes('.jpg') || url.includes('.png')) return 'image'
    if (url.includes('.pdf') || url.includes('.doc') || url.includes('.txt')) return 'document'
    return 'link'
  }

  const generatePreviewContent = (type: string): string => {
    switch (type) {
      case 'video':
        return 'Video content preview will appear here'
      case 'image':
        return 'Image preview will appear here'
      case 'document':
        return 'Document preview will appear here'
      default:
        return 'Link content preview will appear here'
    }
  }

  const handleDeleteLink = (id: string) => {
    setLinks(links.filter(link => link.id !== id))
    if (selectedLink?.id === id) setSelectedLink(null)
  }

  const handleSaveNote = () => {
    if (!selectedLink || !newNote.trim()) return

    const updatedLinks = links.map(link => 
      link.id === selectedLink.id 
        ? { ...link, notes: newNote }
        : link
    )
    
    setLinks(updatedLinks)
    setSelectedLink({ ...selectedLink, notes: newNote })
    setNewNote('')
  }

  const filteredLinks = links.filter(link => {
    const matchesFolder = selectedFolder === 'All' || link.folder === selectedFolder
    const matchesSearch = link.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         link.notes.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesFolder && matchesSearch
  })

  const getIconForType = (type: string) => {
    switch (type) {
      case 'video': return <Video className="h-5 w-5 text-red-500" />
      case 'image': return <Image className="h-5 w-5 text-green-500" />
      case 'document': return <FileText className="h-5 w-5 text-blue-500" />
      default: return <Globe className="h-5 w-5 text-purple-500" />
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <header className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">Link Organizer</h1>
          <p className="text-gray-600">Save, organize, and annotate your favorite links</p>
        </header>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Panel - Add Link and Folders */}
          <div className="lg:col-span-1 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Plus className="h-5 w-5" />
                  Add New Link
                </CardTitle>
                <CardDescription>Save a new link to your collection</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    value={newLink.title}
                    onChange={(e) => setNewLink({...newLink, title: e.target.value})}
                    placeholder="Enter link title"
                  />
                </div>
                <div>
                  <Label htmlFor="url">URL</Label>
                  <Input
                    id="url"
                    value={newLink.url}
                    onChange={(e) => setNewLink({...newLink, url: e.target.value})}
                    placeholder="https://example.com"
                  />
                </div>
                <div>
                  <Label htmlFor="folder">Folder</Label>
                  <Select value={newLink.folder} onValueChange={(value) => setNewLink({...newLink, folder: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {folders.filter(f => f !== 'All').map(folder => (
                        <SelectItem key={folder} value={folder}>{folder}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <Button onClick={handleAddLink} className="w-full">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Link
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Folder className="h-5 w-5" />
                  Folders
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2">
                  {folders.map(folder => (
                    <Button
                      key={folder}
                      variant={selectedFolder === folder ? "default" : "outline"}
                      size="sm"
                      onClick={() => setSelectedFolder(folder)}
                      className="flex items-center gap-1"
                    >
                      <Folder className="h-4 w-4" />
                      {folder}
                    </Button>
                  ))}
                  <Button variant="outline" size="sm">
                    <Plus className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Middle Panel - Link List */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Links</span>
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                    <Input
                      placeholder="Search links..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </CardTitle>
                <CardDescription>
                  {filteredLinks.length} {filteredLinks.length === 1 ? 'link' : 'links'} found
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 max-h-[600px] overflow-y-auto">
                  {filteredLinks.length > 0 ? (
                    filteredLinks.map(link => (
                      <div 
                        key={link.id} 
                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                          selectedLink?.id === link.id ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'
                        }`}
                        onClick={() => setSelectedLink(link)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start gap-2">
                            {getIconForType(link.type)}
                            <div>
                              <h3 className="font-medium">{link.title}</h3>
                              <p className="text-sm text-gray-500 truncate">{link.url}</p>
                              <div className="flex items-center gap-1 mt-1">
                                <Folder className="h-3 w-3 text-gray-400" />
                                <span className="text-xs text-gray-500">{link.folder}</span>
                              </div>
                            </div>
                          </div>
                          <div className="flex gap-1">
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleDeleteLink(link.id)
                              }}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No links found. Add a new link to get started.
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Panel - Link Details and Notes */}
          <div className="lg:col-span-1">
            {selectedLink ? (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {getIconForType(selectedLink.type)}
                    {selectedLink.title}
                  </CardTitle>
                  <CardDescription className="break-all">{selectedLink.url}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div>
                    <h3 className="font-medium mb-2">Content Preview</h3>
                    <div className="bg-gray-100 border border-dashed rounded-lg p-4 min-h-[150px] flex items-center justify-center">
                      {selectedLink.type === 'video' && (
                        <div className="text-center">
                          <Video className="h-12 w-12 mx-auto text-red-500 mb-2" />
                          <p className="text-gray-600">Video content preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'image' && (
                        <div className="text-center">
                          <Image className="h-12 w-12 mx-auto text-green-500 mb-2" />
                          <p className="text-gray-600">Image preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'document' && (
                        <div className="text-center">
                          <FileText className="h-12 w-12 mx-auto text-blue-500 mb-2" />
                          <p className="text-gray-600">Document preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'link' && (
                        <div className="text-center">
                          <Globe className="h-12 w-12 mx-auto text-purple-500 mb-2" />
                          <p className="text-gray-600">Link content preview</p>
                        </div>
                      )}
                    </div>
                  </div>

                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-medium">Notes</h3>
                      <Button variant="outline" size="sm">
                        <Edit className="h-4 w-4 mr-1" />
                        Edit
                      </Button>
                    </div>
                    <Textarea
                      value={selectedLink.notes}
                      onChange={(e) => {
                        const updatedLinks = links.map(link => 
                          link.id === selectedLink.id 
                            ? { ...link, notes: e.target.value }
                            : link
                        )
                        setLinks(updatedLinks)
                        setSelectedLink({ ...selectedLink, notes: e.target.value })
                      }}
                      placeholder="Add your notes here..."
                      className="min-h-[120px]"
                    />
                  </div>

                  <div className="flex gap-2">
                    <Button variant="outline" className="flex-1">
                      Export
                    </Button>
                    <Button variant="outline" className="flex-1">
                      Share
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardContent className="flex flex-col items-center justify-center py-12">
                  <FileText className="h-16 w-16 text-gray-300 mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-1">No Link Selected</h3>
                  <p className="text-gray-500 text-center">Select a link from your collection to view details and add notes</p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default LinkOrganizer
