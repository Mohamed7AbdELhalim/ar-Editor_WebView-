import { useState, useEffect, useRef } from 'react'
import { Button } from "/components/ui/button"
import { Input } from "/components/ui/input"
import { Label } from "/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import { Search, Plus, Folder, FileText as FileTextIcon, Image, Video, Globe, Trash2, Edit, PlusCircle, X, Upload, Download, File, Archive, FileImage, Cloud, HardDrive, Mail, User, LogOut } from "lucide-react"

interface LinkItem {
  id: string
  title: string
  url: string
  content: string
  notes: string
  folder: string
  type: 'link' | 'image' | 'video' | 'document' | 'html' | 'txt' | 'zip' | 'pdf'
  createdAt: Date
}

interface GoogleDriveConnection {
  email: string
  connected: boolean
  accessToken?: string
  refreshToken?: string
}

const LinkOrganizer = () => {
  const [links, setLinks] = useState<LinkItem[]>([])
  const [folders, setFolders] = useState<string[]>(['All', 'Work', 'Personal', 'Research'])
  const [selectedFolder, setSelectedFolder] = useState('All')
  const [searchTerm, setSearchTerm] = useState('')
  const [newLink, setNewLink] = useState({ title: '', url: '', folder: 'Work' })
  const [editingLink, setEditingLink] = useState<LinkItem | null>(null)
  const [selectedLink, setSelectedLink] = useState<LinkItem | null>(null)
  const [newNote, setNewNote] = useState('')
  const [newFolderName, setNewFolderName] = useState('')
  const [importStatus, setImportStatus] = useState<string | null>(null)
  const [fileUploadStatus, setFileUploadStatus] = useState<string | null>(null)
  const [googleDriveStatus, setGoogleDriveStatus] = useState<string | null>(null)
  const [syncStatus, setSyncStatus] = useState<'idle' | 'syncing' | 'success' | 'error'>('idle')
  const [showEmailModal, setShowEmailModal] = useState(false)
  const [emailInput, setEmailInput] = useState('')
  const [googleDriveConnection, setGoogleDriveConnection] = useState<GoogleDriveConnection | null>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const fileUploadRef = useRef<HTMLInputElement>(null)

  // Load initial data
  useEffect(() => {
    const savedLinks = localStorage.getItem('linkOrganizerLinks')
    if (savedLinks) {
      setLinks(JSON.parse(savedLinks))
    }
    
    const savedFolders = localStorage.getItem('linkOrganizerFolders')
    if (savedFolders) {
      setFolders(JSON.parse(savedFolders))
    }
    
    // Load Google Drive connection
    const savedConnection = localStorage.getItem('googleDriveConnection')
    if (savedConnection) {
      const connection: GoogleDriveConnection = JSON.parse(savedConnection)
      setGoogleDriveConnection(connection)
    }
    
    // Set up periodic sync if Google Drive is connected
    if (googleDriveConnection?.connected) {
      const syncInterval = setInterval(() => {
        syncWithGoogleDrive()
      }, 300000) // Sync every 5 minutes
      
      return () => clearInterval(syncInterval)
    }
  }, [googleDriveConnection?.connected])

  // Save links to localStorage
  useEffect(() => {
    localStorage.setItem('linkOrganizerLinks', JSON.stringify(links))
  }, [links])

  // Save folders to localStorage
  useEffect(() => {
    localStorage.setItem('linkOrganizerFolders', JSON.stringify(folders))
  }, [folders])

  // Save Google Drive connection to localStorage
  useEffect(() => {
    if (googleDriveConnection) {
      localStorage.setItem('googleDriveConnection', JSON.stringify(googleDriveConnection))
    }
  }, [googleDriveConnection])

  // Auto-save to Google Drive if connected
  useEffect(() => {
    if (googleDriveConnection?.connected && syncStatus === 'idle') {
      setSyncStatus('syncing')
      setTimeout(() => {
        syncWithGoogleDrive()
      }, 1000)
    }
  }, [links, googleDriveConnection?.connected])

  const handleAddLink = () => {
    if (!newLink.title || !newLink.url) return

    const linkType = determineLinkType(newLink.url)
    const newLinkItem: LinkItem = {
      id: Date.now().toString(),
      title: newLink.title,
      url: newLink.url,
      content: generatePreviewContent(linkType),
      notes: '',
      folder: newLink.folder,
      type: linkType,
      createdAt: new Date()
    }

    setLinks([...links, newLinkItem])
    setNewLink({ title: '', url: '', folder: newLink.folder })
  }

  const determineLinkType = (url: string): 'link' | 'image' | 'video' | 'document' | 'html' | 'txt' | 'zip' | 'pdf' => {
    if (url.includes('youtube.com') || url.includes('youtu.be')) return 'video'
    if (url.includes('imgur.com') || url.includes('.jpg') || url.includes('.png')) return 'image'
    if (url.includes('.pdf')) return 'pdf'
    if (url.includes('.html') || url.includes('.htm')) return 'html'
    if (url.includes('.txt')) return 'txt'
    if (url.includes('.zip')) return 'zip'
    if (url.includes('.doc') || url.includes('.docx')) return 'document'
    return 'link'
  }

  const generatePreviewContent = (type: string): string => {
    switch (type) {
      case 'video':
        return 'Video content preview will appear here'
      case 'image':
        return 'Image preview will appear here'
      case 'document':
        return 'Document preview will appear here'
      case 'html':
        return 'HTML content preview will appear here'
      case 'txt':
        return 'Text content preview will appear here'
      case 'zip':
        return 'Archive preview will appear here'
      case 'pdf':
        return 'PDF preview will appear here'
      default:
        return 'Link content preview will appear here'
    }
  }

  const handleDeleteLink = (id: string) => {
    setLinks(links.filter(link => link.id !== id))
    if (selectedLink?.id === id) setSelectedLink(null)
  }

  const handleSaveNote = () => {
    if (!selectedLink || !newNote.trim()) return

    const updatedLinks = links.map(link => 
      link.id === selectedLink.id 
        ? { ...link, notes: newNote }
        : link
    )
    
    setLinks(updatedLinks)
    setSelectedLink({ ...selectedLink, notes: newNote })
    setNewNote('')
  }

  const handleAddFolder = () => {
    if (!newFolderName.trim() || folders.includes(newFolderName)) return
    
    const updatedFolders = [...folders, newFolderName]
    setFolders(updatedFolders)
    setNewFolderName('')
    
    // Update the new link form to use the new folder as default
    setNewLink({...newLink, folder: newFolderName})
  }

  const handleDeleteFolder = (folderToDelete: string) => {
    if (folderToDelete === 'All') return // Prevent deleting the "All" folder
    
    // Remove the folder
    const updatedFolders = folders.filter(folder => folder !== folderToDelete)
    setFolders(updatedFolders)
    
    // If the deleted folder was selected, switch to "All"
    if (selectedFolder === folderToDelete) {
      setSelectedFolder('All')
    }
    
    // Move all links in the deleted folder to "All"
    const updatedLinks = links.map(link => 
      link.folder === folderToDelete 
        ? { ...link, folder: 'All' }
        : link
    )
    setLinks(updatedLinks)
  }

  const handleImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    const reader = new FileReader()
    reader.onload = (e) => {
      try {
        const content = e.target?.result as string
        const importedData = JSON.parse(content)
        
        // Validate the imported data structure
        if (!importedData.links || !Array.isArray(importedData.links)) {
          throw new Error('Invalid JSON format. Expected "links" array.')
        }
        
        // Process each link
        const newLinks: LinkItem[] = importedData.links.map((link: any, index: number) => {
          // Ensure required fields exist
          if (!link.title || !link.url) {
            throw new Error(`Link at index ${index} is missing required fields (title or url)`)
          }
          
          // Determine type if not provided
          const type = link.type || determineLinkType(link.url)
          
          // Create or use existing ID
          const id = link.id || `imported-${Date.now()}-${index}`
          
          // Parse date if provided, otherwise use current date
          let createdAt
          if (link.createdAt) {
            if (link.createdAt instanceof Date) {
              createdAt = link.createdAt
            } else {
              createdAt = new Date(link.createdAt)
            }
          } else {
            createdAt = new Date()
          }
          
          return {
            id,
            title: link.title,
            url: link.url,
            content: link.content || generatePreviewContent(type),
            notes: link.notes || '',
            folder: link.folder || 'All',
            type,
            createdAt
          }
        })
        
        // Add new folders from imported data
        const importedFolders = [...new Set(newLinks.map(link => link.folder))]
        const uniqueFolders = [...importedFolders, ...folders].filter((folder, index, self) => 
          self.indexOf(folder) === index && folder !== 'All'
        )
        setFolders(['All', ...uniqueFolders])
        
        // Add new links to existing links
        setLinks([...links, ...newLinks])
        setImportStatus(`Successfully imported ${newLinks.length} links!`)
        
        // Clear the status after 3 seconds
        setTimeout(() => setImportStatus(null), 3000)
      } catch (error) {
        console.error('Error importing JSON:', error)
        setImportStatus(`Error: ${error instanceof Error ? error.message : 'Invalid JSON file'}`)
        setTimeout(() => setImportStatus(null), 5000)
      }
    }
    
    reader.readAsText(file)
    
    // Reset the file input to allow importing the same file again
    if (fileInputRef.current) {
      fileInputRef.current.value = ''
    }
  }

  const handleExport = () => {
    const exportData = {
      links,
      folders: folders.filter(f => f !== 'All'),
      exportDate: new Date().toISOString(),
      version: '1.0'
    }
    
    const dataStr = JSON.stringify(exportData, null, 2)
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr)
    
    const exportFileDefaultName = `link-organizer-export-${new Date().toISOString().split('T')[0]}.json`
    
    const linkElement = document.createElement('a')
    linkElement.setAttribute('href', dataUri)
    linkElement.setAttribute('download', exportFileDefaultName)
    linkElement.click()
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files
    if (!files || files.length === 0) return

    const uploadFolder = selectedFolder === 'All' ? 'Uploads' : selectedFolder
    const newLinks: LinkItem[] = []

    // Add "Uploads" folder if it doesn't exist
    if (!folders.includes('Uploads')) {
      setFolders([...folders, 'Uploads'])
    }

    // Process each file
    Array.from(files).forEach(file => {
      const fileId = `file-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
      const fileType = getFileType(file.name)
      
      newLinks.push({
        id: fileId,
        title: file.name,
        url: file.name, // In a real app, this would be a file URL or path
        content: `Uploaded file: ${file.name} (${formatFileSize(file.size)})`,
        notes: '',
        folder: uploadFolder,
        type: fileType,
        createdAt: new Date()
      })
    })

    // Add new links to existing links
    setLinks([...links, ...newLinks])
    setFileUploadStatus(`Successfully uploaded ${files.length} file(s)!`)
    
    // Clear the status after 3 seconds
    setTimeout(() => setFileUploadStatus(null), 3000)
    
    // Reset the file input to allow uploading the same files again
    if (fileUploadRef.current) {
      fileUploadRef.current.value = ''
    }
  }

  const getFileType = (fileName: string): 'html' | 'txt' | 'zip' | 'pdf' | 'document' | 'image' | 'video' | 'link' => {
    const extension = fileName.split('.').pop()?.toLowerCase() || ''
    
    if (extension === 'html' || extension === 'htm') return 'html'
    if (extension === 'txt') return 'txt'
    if (extension === 'zip') return 'zip'
    if (extension === 'pdf') return 'pdf'
    if (extension === 'doc' || extension === 'docx') return 'document'
    if (extension === 'jpg' || extension === 'jpeg' || extension === 'png' || extension === 'gif') return 'image'
    if (extension === 'mp4' || extension === 'mov' || extension === 'avi') return 'video'
    
    return 'link'
  }

  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return bytes + ' B'
    else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB'
    else return (bytes / 1048576).toFixed(1) + ' MB'
  }

  // Google Drive integration functions
  const connectToGoogleDrive = () => {
    setShowEmailModal(true)
  }

  const handleEmailSubmit = () => {
    if (!emailInput.trim()) return
    
    // In a real implementation, this would send the email to Google for authentication
    // For this example, we'll simulate the connection
    const connection: GoogleDriveConnection = {
      email: emailInput,
      connected: true,
      accessToken: `mock-token-${Date.now()}`,
      refreshToken: `mock-refresh-token-${Date.now()}`
    }
    
    setGoogleDriveConnection(connection)
    setShowEmailModal(false)
    setEmailInput('')
    setGoogleDriveStatus(`Connected to Google Drive as ${emailInput}`)
    
    setTimeout(() => setGoogleDriveStatus(null), 3000)
  }

  const disconnectFromGoogleDrive = () => {
    if (googleDriveConnection) {
      setGoogleDriveConnection(null)
      localStorage.removeItem('googleDriveConnection')
      setGoogleDriveStatus('Disconnected from Google Drive')
      
      setTimeout(() => setGoogleDriveStatus(null), 3000)
    }
  }

  const uploadToGoogleDrive = () => {
    if (!googleDriveConnection) {
      setGoogleDriveStatus('Please connect to Google Drive first')
      setTimeout(() => setGoogleDriveStatus(null), 3000)
      return
    }
    
    setGoogleDriveStatus('Uploading to Google Drive...')
    
    // Simulate upload process
    setTimeout(() => {
      setGoogleDriveStatus(`Successfully uploaded to Google Drive as ${googleDriveConnection.email}!`)
      setTimeout(() => setGoogleDriveStatus(null), 3000)
    }, 2000)
  }

  const importFromGoogleDrive = () => {
    if (!googleDriveConnection) {
      setGoogleDriveStatus('Please connect to Google Drive first')
      setTimeout(() => setGoogleDriveStatus(null), 3000)
      return
    }
    
    setGoogleDriveStatus('Importing from Google Drive...')
    
    // Simulate import process
    setTimeout(() => {
      // Add some sample data for demonstration
      const sampleLinks: LinkItem[] = [
        {
          id: `drive-${Date.now()}-1`,
          title: 'Sample Link from Drive',
          url: 'https://example.com',
          content: 'Content from Google Drive',
          notes: 'This was imported from Google Drive',
          folder: 'All',
          type: 'link',
          createdAt: new Date()
        }
      ]
      
      setLinks([...links, ...sampleLinks])
      setGoogleDriveStatus(`Successfully imported ${sampleLinks.length} link(s) from Google Drive as ${googleDriveConnection.email}!`)
      setTimeout(() => setGoogleDriveStatus(null), 3000)
    }, 2000)
  }

  const syncWithGoogleDrive = () => {
    if (!googleDriveConnection) return
    
    setSyncStatus('syncing')
    
    // Simulate sync process
    setTimeout(() => {
      setSyncStatus('success')
      setTimeout(() => setSyncStatus('idle'), 2000)
    }, 1500)
  }

  const filteredLinks = links.filter(link => {
    const matchesFolder = selectedFolder === 'All' || link.folder === selectedFolder
    const matchesSearch = link.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         link.notes.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesFolder && matchesSearch
  })

  const getIconForType = (type: string) => {
    switch (type) {
      case 'video': return <Video className="h-5 w-5 text-red-500" />
      case 'image': return <Image className="h-5 w-5 text-green-500" />
      case 'document': return <FileTextIcon className="h-5 w-5 text-blue-500" />
      case 'html': return <FileTextIcon className="h-5 w-5 text-orange-500" />
      case 'txt': return <FileTextIcon className="h-5 w-5 text-gray-500" />
      case 'zip': return <Archive className="h-5 w-5 text-yellow-500" />
      case 'pdf': return <File className="h-5 w-5 text-red-600" />
      default: return <Globe className="h-5 w-5 text-purple-500" />
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <header className="mb-8">
          <h1 className="text-3xl font-bold text-gray-800 mb-2">Link Organizer</h1>
          <p className="text-gray-600">Save, organize, and annotate your favorite links and files</p>
        </header>

        {/* Status Messages */}
        {(importStatus || fileUploadStatus || googleDriveStatus) && (
          <div className="mb-4 space-y-2">
            {importStatus && (
              <div className={`p-3 rounded-lg ${importStatus.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                {importStatus}
              </div>
            )}
            {fileUploadStatus && (
              <div className={`p-3 rounded-lg ${fileUploadStatus.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                {fileUploadStatus}
              </div>
            )}
            {googleDriveStatus && (
              <div className={`p-3 rounded-lg ${googleDriveStatus.includes('Error') ? 'bg-red-100 text-red-700' : 'bg-green-100 text-green-700'}`}>
                {googleDriveStatus}
              </div>
            )}
          </div>
        )}

        {/* Sync Status */}
        {googleDriveConnection?.connected && syncStatus !== 'idle' && (
          <div className="mb-4">
            <div className={`p-3 rounded-lg flex items-center ${
              syncStatus === 'syncing' ? 'bg-blue-100 text-blue-700' : 
              syncStatus === 'success' ? 'bg-green-100 text-green-700' : 
              'bg-red-100 text-red-700'
            }`}>
              {syncStatus === 'syncing' && (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-700 mr-2"></div>
                  Syncing with Google Drive...
                </>
              )}
              {syncStatus === 'success' && (
                <>
                  <div className="h-4 w-4 bg-green-500 rounded-full mr-2"></div>
                  Successfully synced with Google Drive
                </>
              )}
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Panel - Add Link, Folders, File Upload, and Google Drive */}
          <div className="lg:col-span-1 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Plus className="h-5 w-5" />
                  Add New Link
                </CardTitle>
                <CardDescription>Save a new link to your collection</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    value={newLink.title}
                    onChange={(e) => setNewLink({...newLink, title: e.target.value})}
                    placeholder="Enter link title"
                  />
                </div>
                <div>
                  <Label htmlFor="url">URL</Label>
                  <Input
                    id="url"
                    value={newLink.url}
                    onChange={(e) => setNewLink({...newLink, url: e.target.value})}
                    placeholder="https://example.com"
                  />
                </div>
                <div>
                  <Label htmlFor="folder">Folder</Label>
                  <Select value={newLink.folder} onValueChange={(value) => setNewLink({...newLink, folder: value})}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {folders.filter(f => f !== 'All').map(folder => (
                        <SelectItem key={folder} value={folder}>{folder}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <Button onClick={handleAddLink} className="w-full">
                  <Plus className="h-4 w-4 mr-2" />
                  Add Link
                </Button>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Folder className="h-5 w-5" />
                  Folders
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="flex flex-wrap gap-2 mb-4">
                  {folders.map(folder => (
                    <div key={folder} className="relative">
                      <Button
                        variant={selectedFolder === folder ? "default" : "outline"}
                        size="sm"
                        onClick={() => setSelectedFolder(folder)}
                        className="flex items-center gap-1 pr-8"
                      >
                        <Folder className="h-4 w-4" />
                        {folder}
                      </Button>
                      {folder !== 'All' && (
                        <Button
                          variant="ghost"
                          size="sm"
                          className="absolute -right-2 -top-1 h-5 w-5 p-0"
                          onClick={(e) => {
                            e.stopPropagation()
                            handleDeleteFolder(folder)
                          }}
                        >
                          <X className="h-3 w-3" />
                        </Button>
                      )}
                    </div>
                  ))}
                </div>
                
                <div className="flex gap-2">
                  <Input
                    placeholder="New folder name"
                    value={newFolderName}
                    onChange={(e) => setNewFolderName(e.target.value)}
                    className="flex-1"
                  />
                  <Button 
                    onClick={handleAddFolder}
                    disabled={!newFolderName.trim() || folders.includes(newFolderName)}
                    size="sm"
                  >
                    <PlusCircle className="h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Upload className="h-5 w-5" />
                  Upload Files
                </CardTitle>
                <CardDescription>Upload HTML, TXT, ZIP, or PDF files to organize</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="file-upload">Select Files</Label>
                  <Input
                    id="file-upload"
                    type="file"
                    accept=".html,.htm,.txt,.zip,.pdf"
                    multiple
                    onChange={handleFileUpload}
                    ref={fileUploadRef}
                    className="cursor-pointer"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    Supported formats: HTML, TXT, ZIP, PDF
                  </p>
                </div>
                
                <div className="text-sm text-gray-600">
                  <p className="font-medium mb-1">Upload to:</p>
                  <p>{selectedFolder === 'All' ? 'Uploads folder' : selectedFolder}</p>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Cloud className="h-5 w-5" />
                  Google Drive Integration
                </CardTitle>
                <CardDescription>Backup and sync your data with Google Drive</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {googleDriveConnection ? (
                  <div className="space-y-4">
                    <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                      <div className="flex items-center">
                        <User className="h-5 w-5 text-green-600 mr-2" />
                        <div>
                          <p className="font-medium">{googleDriveConnection.email}</p>
                          <p className="text-sm text-green-600">Connected</p>
                        </div>
                      </div>
                      <Button variant="outline" size="sm" onClick={disconnectFromGoogleDrive}>
                        <LogOut className="h-4 w-4 mr-1" />
                        Disconnect
                      </Button>
                    </div>
                    
                    <div className="space-y-2">
                      <Button 
                        onClick={uploadToGoogleDrive} 
                        className="w-full" 
                        variant="default"
                      >
                        <Cloud className="h-4 w-4 mr-2" />
                        Upload to Google Drive
                      </Button>
                      
                      <Button 
                        onClick={importFromGoogleDrive} 
                        className="w-full" 
                        variant="default"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        Import from Google Drive
                      </Button>
                    </div>
                    
                    <div className="text-xs text-gray-500 bg-blue-50 p-2 rounded">
                      <p className="font-medium mb-1">Auto-sync enabled</p>
                      <p>Your data will be automatically synced to Google Drive every 5 minutes.</p>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <p className="text-sm text-gray-600">
                      Connect your Google Drive account to backup and sync your data across devices.
                    </p>
                    <Button onClick={connectToGoogleDrive} className="w-full">
                      <Cloud className="h-4 w-4 mr-2" />
                      Connect Google Drive
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <HardDrive className="h-5 w-5" />
                  Local Storage
                </CardTitle>
                <CardDescription>Manage your local data storage</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="text-sm text-gray-600">
                  <p className="font-medium mb-1">Storage Info:</p>
                  <p>Data is automatically saved to your browser's local storage.</p>
                  <p className="mt-2">Last saved: {new Date().toLocaleString()}</p>
                </div>
                
                <Button onClick={handleExport} className="w-full" variant="outline">
                  <Download className="h-4 w-4 mr-2" />
                  Export to JSON
                </Button>
                
                <details className="text-sm">
                  <summary className="cursor-pointer text-blue-600 hover:text-blue-800 font-medium">
                    Example JSON Format
                  </summary>
                  <pre className="mt-2 p-3 bg-gray-100 rounded text-xs overflow-x-auto">
{`{
  "links": [
    {
      "id": "unique-id-1",
      "title": "Example Link",
      "url": "https://example.com",
      "content": "Content preview",
      "notes": "My notes about this link",
      "folder": "Work",
      "type": "link",
      "createdAt": "2023-05-15T12:00:00.000Z"
    },
    {
      "id": "unique-id-2",
      "title": "PDF Document",
      "url": "document.pdf",
      "content": "PDF document preview",
      "notes": "Important research paper",
      "folder": "Research",
      "type": "pdf",
      "createdAt": "2023-05-16T14:30:00.000Z"
    }
  ]
}`}
                  </pre>
                </details>
              </CardContent>
            </Card>
          </div>

          {/* Middle Panel - Link List */}
          <div className="lg:col-span-1">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>Links</span>
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                    <Input
                      placeholder="Search links..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </CardTitle>
                <CardDescription>
                  {filteredLinks.length} {filteredLinks.length === 1 ? 'link' : 'links'} found
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-3 max-h-[600px] overflow-y-auto">
                  {filteredLinks.length > 0 ? (
                    filteredLinks.map(link => (
                      <div 
                        key={link.id} 
                        className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                          selectedLink?.id === link.id ? 'bg-blue-50 border-blue-200' : 'hover:bg-gray-50'
                        }`}
                        onClick={() => setSelectedLink(link)}
                      >
                        <div className="flex items-start justify-between">
                          <div className="flex items-start gap-2">
                            {getIconForType(link.type)}
                            <div>
                              <h3 className="font-medium">{link.title}</h3>
                              <p className="text-sm text-gray-500 truncate">{link.url}</p>
                              <div className="flex items-center gap-1 mt-1">
                                <Folder className="h-3 w-3 text-gray-400" />
                                <span className="text-xs text-gray-500">{link.folder}</span>
                              </div>
                            </div>
                          </div>
                          <div className="flex gap-1">
                            <Button 
                              variant="ghost" 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation()
                                handleDeleteLink(link.id)
                              }}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      No links found. Add a new link to get started.
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Right Panel - Link Details and Notes */}
          <div className="lg:col-span-1">
            {selectedLink ? (
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    {getIconForType(selectedLink.type)}
                    {selectedLink.title}
                  </CardTitle>
                  <CardDescription className="break-all">{selectedLink.url}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div>
                    <h3 className="font-medium mb-2">Content Preview</h3>
                    <div className="bg-gray-100 border border-dashed rounded-lg p-4 min-h-[150px] flex items-center justify-center">
                      {selectedLink.type === 'video' && (
                        <div className="text-center">
                          <Video className="h-12 w-12 mx-auto text-red-500 mb-2" />
                          <p className="text-gray-600">Video content preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'image' && (
                        <div className="text-center">
                          <Image className="h-12 w-12 mx-auto text-green-500 mb-2" />
                          <p className="text-gray-600">Image preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'document' && (
                        <div className="text-center">
                          <FileTextIcon className="h-12 w-12 mx-auto text-blue-500 mb-2" />
                          <p className="text-gray-600">Document preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'html' && (
                        <div className="text-center">
                          <FileTextIcon className="h-12 w-12 mx-auto text-orange-500 mb-2" />
                          <p className="text-gray-600">HTML file preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'txt' && (
                        <div className="text-center">
                          <FileTextIcon className="h-12 w-12 mx-auto text-gray-500 mb-2" />
                          <p className="text-gray-600">Text file preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'zip' && (
                        <div className="text-center">
                          <Archive className="h-12 w-12 mx-auto text-yellow-500 mb-2" />
                          <p className="text-gray-600">Archive preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'pdf' && (
                        <div className="text-center">
                          <File className="h-12 w-12 mx-auto text-red-600 mb-2" />
                          <p className="text-gray-600">PDF preview</p>
                        </div>
                      )}
                      {selectedLink.type === 'link' && (
                        <div className="text-center">
                          <Globe className="h-12 w-12 mx-auto text-purple-500 mb-2" />
                          <p className="text-gray-600">Link content preview</p>
                        </div>
                      )}
                    </div>
                  </div>

                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-medium">Notes</h3>
                      <Button variant="outline" size="sm">
                        <Edit className="h-4 w-4 mr-1" />
                        Edit
                      </Button>
                    </div>
                    <Textarea
                      value={selectedLink.notes}
                      onChange={(e) => {
                        const updatedLinks = links.map(link => 
                          link.id === selectedLink.id 
                            ? { ...link, notes: e.target.value }
                            : link
                        )
                        setLinks(updatedLinks)
                        setSelectedLink({ ...selectedLink, notes: e.target.value })
                      }}
                      placeholder="Add your notes here..."
                      className="min-h-[120px]"
                    />
                  </div>

                  <div className="flex gap-2">
                    <Button variant="outline" className="flex-1">
                      Export
                    </Button>
                    <Button variant="outline" className="flex-1">
                      Share
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ) : (
              <Card>
                <CardContent className="flex flex-col items-center justify-center py-12">
                  <FileTextIcon className="h-16 w-16 text-gray-300 mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-1">No Link Selected</h3>
                  <p className="text-gray-500 text-center">Select a link from your collection to view details and add notes</p>
                </CardContent>
              </Card>
            )}
          </div>
        </div>
      </div>

      {/* Email Modal for Google Drive Connection */}
      {showEmailModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-md">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Mail className="h-5 w-5" />
                Connect Google Drive
              </CardTitle>
              <CardDescription>
                Enter your email to connect to Google Drive and backup your data.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="email">Email Address</Label>
                <Input
                  id="email"
                  type="email"
                  value={emailInput}
                  onChange={(e) => setEmailInput(e.target.value)}
                  placeholder="your.email@example.com"
                />
              </div>
              <div className="flex gap-2">
                <Button onClick={handleEmailSubmit} className="flex-1" disabled={!emailInput.trim()}>
                  Connect
                </Button>
                <Button variant="outline" onClick={() => setShowEmailModal(false)}>
                  Cancel
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}

export default LinkOrganizer
